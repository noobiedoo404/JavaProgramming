// https://leetcode.com/problems/add-two-numbers/
*whenever we will be asked to create a new linkedlist in the question, we must follow that dummyHead creating and another node  creation.
            ListNode dummyHead=new ListNode();
            ListNode ans=dummyHead;
        then eventually ans will be ans.next repeatedly;
            ans=ans.next;
    if most of the cases, we will be returing dummyHead.next;
*keep adding the values of the two list along with the carry until we get a null in any one of the two lists.
*once we get a null, get out of the loop and along with the carry add the untraversed list items.
*

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */


class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry=0;
        ListNode dummyHead=new ListNode();
        ListNode ans=dummyHead;
        while(l1!=null && l2!=null){
            int res=l1.val+l2.val+carry;
                ans.next=new ListNode(res%10);
                carry=res/10;
                l1=l1.next;
                l2=l2.next;
                ans=ans.next;
            }
        
        //we must now evaluate the number which is untraversed considering the carry aswell.
        if(l1!=null){
            while(l1!=null){
                int res=l1.val+carry;
                ans.next=new ListNode(res%10);
                carry=res/10;
                l1=l1.next;
                ans=ans.next;
            }
            
        }
        else if(l2!=null){
            while(l2!=null){
                int res=l2.val+carry;
                ans.next=new ListNode(res%10);
                carry=res/10;
                l2=l2.next;
                ans=ans.next;
            }
            
        }
        //if any carry is left other than zero.
        if(carry!=0){
            ans.next=new ListNode(carry);
        }
    return dummyHead.next;
        
    } 
}